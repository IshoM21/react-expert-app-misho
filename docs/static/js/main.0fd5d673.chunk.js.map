{"version":3,"sources":["components/AddCategory.js","helpers/getGifs.js","components/GifGridItem.js","components/GifGrid.js","hooks/useFetchGifs.js","GfiExpertApp.js","index.js"],"names":["AddCategory","setCategories","useState","inputValue","setInputValue","onSubmit","e","preventDefault","trim","length","cats","type","value","onChange","target","getGifs","category","a","url","encodeURI","fetch","resp","json","data","gifs","map","img","id","title","images","downsized_medium","GifGridItem","className","src","alt","GifGrid","loading","state","setState","useEffect","then","imgs","setTimeout","useFetchGifs","GifExpertApp","categories","i","ReactDOM","render","document","getElementById"],"mappings":"2MAGaA,EAAc,SAAC,GAAuB,IAArBC,EAAoB,EAApBA,cAAoB,EACVC,mBAAS,IADC,mBACvCC,EADuC,KAC3BC,EAD2B,KAgB9C,OACI,sBAAMC,SAVW,SAACC,GAClBA,EAAEC,iBACGJ,EAAWK,OAAOC,OAAS,IAC5BR,GAAe,SAAAS,GAAI,OAAKP,GAAL,mBAAoBO,OACvCN,EAAc,MAMlB,SACI,uBACIO,KAAK,OACLC,MAAOT,EACPU,SAnBc,SAACP,GAEvBF,EAAcE,EAAEQ,OAAOF,a,+BCPlBG,EAAO,uCAAG,WAAMC,GAAN,uBAAAC,EAAA,6DAIbC,EAJa,iDAImCC,UAAUH,GAJ7C,+DAKAI,MAAMF,GALN,cAKbG,EALa,gBAMEA,EAAKC,OANP,uBAMZC,EANY,EAMZA,KACDC,EAAOD,EAAKE,KAAK,SAAAC,GAAQ,IAAD,EAC1B,MAAO,CACHC,GAAID,EAAIC,GACRC,MAAOF,EAAIE,MACXV,IAAG,UAAEQ,EAAIG,cAAN,aAAE,EAAYC,iBAAiBZ,QAXvB,kBAeZM,GAfY,4CAAH,sDCEPO,EAAc,SAAC,GAAqB,EAApBJ,GAAqB,IAAjBC,EAAgB,EAAhBA,MAAOV,EAAS,EAATA,IAEpC,OACI,sBAAKc,UAAU,6CAAf,UACI,iCACI,qBAAKC,IAAKf,EAAKgB,IAAKN,MAExB,4BAAIA,QCLHO,EAAU,SAAC,GAAkB,IAAhBnB,EAAe,EAAfA,SAAe,ECDb,SAAEA,GAAe,IAAD,EAEdd,mBAAS,CAC/BqB,KAAM,GACNa,SAAS,IAJ2B,mBAEjCC,EAFiC,KAE1BC,EAF0B,KAoBxC,OAbAC,qBAAU,WAENxB,EAASC,GACJwB,MAAM,SAAAC,GACHC,YAAW,WACPJ,EAAS,CACLf,KAAMkB,EACNL,SAAS,MAEd,UAEZ,CAAEpB,IAEEqB,EDjByBM,CAAa3B,GAAhCa,EAFwB,EAE7BN,KAAaa,EAFgB,EAEhBA,QACrB,OACI,qCACA,qBAAIJ,UAAU,yCAAd,cAA0DhB,EAA1D,OACEoB,GAAW,wCACb,qBAAKJ,UAAU,YAAf,SACUH,EAAOJ,KAAI,SAACC,GAAD,OACX,cAAC,EAAD,eAEMA,GADCA,EAAIC,aEyBdiB,EAlCM,WAAK,MAGc1C,mBAAU,CAAC,cAHzB,mBAGf2C,EAHe,KAGH5C,EAHG,KAatB,OACI,qCACI,8CACA,cAAC,EAAD,CAAaA,cAAiBA,IAC9B,uBAEA,6BAEQ4C,EAAWpB,KAAK,SAACT,EAAU8B,GAAX,OACZ,cAAC,EAAD,CAEA9B,SAAWA,GADNA,YCtB7B+B,IAASC,OACP,cAAC,EAAD,IACAC,SAASC,eAAe,W","file":"static/js/main.0fd5d673.chunk.js","sourcesContent":["import React, { useState } from 'react'\r\nimport PropTypes from 'prop-types';\r\n\r\nexport const AddCategory = ({ setCategories }) => {\r\n    const [inputValue, setInputValue] = useState('')\r\n    const handleInputChange = (e) => {\r\n        // console.log(e.target.value);\r\n        setInputValue(e.target.value)\r\n    }\r\n\r\n    const handleSubmit = (e) => {\r\n        e.preventDefault()\r\n        if ( inputValue.trim().length > 2 ) {\r\n            setCategories( cats => [inputValue ,...cats])\r\n            setInputValue('')\r\n        }\r\n\r\n    }\r\n\r\n    return (\r\n        <form onSubmit={handleSubmit}>\r\n            <input\r\n                type='text'\r\n                value={inputValue}\r\n                onChange={handleInputChange}\r\n            />\r\n        </form>\r\n    )\r\n}\r\n\r\nAddCategory.propTypes = {\r\n    setCategories: PropTypes.func.isRequired\r\n}","export const getGifs = async(category) =>{\r\n\r\n\r\n    // const url = 'https://api.giphy.com/v1/gifs/search?q=Horimiya&limit=10&api_key=pSSLWLWZNUifTDVUjMSKMiYokt2Mzsaj'\r\n    const url = `https://api.giphy.com/v1/gifs/search?q=${encodeURI(category)}&limit=10&api_key=pSSLWLWZNUifTDVUjMSKMiYokt2Mzsaj`\r\n    const resp = await fetch(url)\r\n    const {data} = await resp.json()\r\n    const gifs = data.map( img => {\r\n        return {\r\n            id: img.id,\r\n            title: img.title,\r\n            url: img.images?.downsized_medium.url\r\n        }\r\n    })\r\n\r\n    return gifs\r\n    \r\n\r\n\r\n}","import React from 'react'\r\n\r\nexport const GifGridItem = ({id, title, url}) => {\r\n    // console.log({id, title, url});\r\n    return (\r\n        <div className='card animate__animated animate__fadeInLeft'>\r\n            <figure>\r\n                <img src={url} alt={title}/>\r\n            </figure>\r\n            <p>{title}</p>\r\n        </div>\r\n    )\r\n}\r\n ","import React /*, { useState, useEffect }*/ from 'react';\r\nimport { useFetchGifs } from '../hooks/useFetchGifs';\r\nimport {GifGridItem} from './GifGridItem'\r\n\r\nexport const GifGrid = ({ category }) => {\r\n\r\n    const { data:images, loading} = useFetchGifs(category)\r\n    return (\r\n        <>\r\n        <h3 className='animate__animated animate__slideInLeft'> { category } </h3>\r\n        { loading && <p>Loading</p> }\r\n        <div className='card-grid'>\r\n                { images.map((img) => (\r\n                  <GifGridItem \r\n                    key={img.id}\r\n                    {...img}\r\n                  /> \r\n                ))}\r\n        </div>\r\n        </>\r\n    )\r\n}\r\n","import { useEffect, useState } from \"react\"\r\nimport { getGifs } from \"../helpers/getGifs\"\r\n\r\nexport const useFetchGifs = ( category ) => {\r\n    \r\n    const [state, setState] = useState({\r\n        data: [],\r\n        loading: true\r\n    })\r\n\r\n    useEffect(()=>{\r\n\r\n        getGifs( category )\r\n            .then( imgs => {\r\n                setTimeout(() => {\r\n                    setState({\r\n                        data: imgs,\r\n                        loading: false\r\n                    })\r\n                }, 3000);\r\n            })\r\n    }, [ category ])\r\n\r\n    return state\r\n}","import React, { useState } from 'react';\r\nimport { AddCategory } from './components/AddCategory';\r\nimport { GifGrid } from './components/GifGrid';\r\n\r\n// Componente \r\nconst GifExpertApp = () =>{\r\n\r\n    // const categories = ['One Punch', 'Horimiya', 'Dragon Ball']\r\n    const [categories, setCategories] = useState( ['One Piece'])\r\n\r\n    // const handleAdd = () => {\r\n    //     // const c = [...categories]\r\n    //     // c.push('One Piece')\r\n    //     // setCategories(c)\r\n\r\n    //     setCategories( cats => [...cats, 'One Piece'])\r\n    // }\r\n\r\n    return (\r\n        <>\r\n            <h2>GifExpertApp</h2>\r\n            <AddCategory setCategories= { setCategories }/>\r\n            <hr/>\r\n\r\n            <ol>\r\n                {\r\n                    categories.map( (category, i) => \r\n                        <GifGrid \r\n                        key={category}\r\n                        category= {category}\r\n                        />\r\n                    )\r\n                }\r\n            </ol>\r\n        </>\r\n    )\r\n}\r\n\r\n\r\nexport default GifExpertApp","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport GifExpertApp from './GfiExpertApp'\n\n\nReactDOM.render(\n  <GifExpertApp/>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n// reportWebVitals();\n\n// GifExpertApp\n// h2, hr\n\n"],"sourceRoot":""}